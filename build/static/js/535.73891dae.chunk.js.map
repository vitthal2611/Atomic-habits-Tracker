{"version":3,"file":"static/js/535.73891dae.chunk.js","mappings":"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","sources":["components/IdentityTracker.js"],"sourcesContent":["import React from 'react';\n\nconst IdentityTracker = ({ habits, view, getHabitStats, toggleHabit }) => {\n  const getDays = () => {\n    const days = [];\n    const now = new Date();\n    \n    if (view === 'weekly') {\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(now.getDate() - i);\n        days.push(day);\n      }\n    } else if (view === 'monthly') {\n      for (let i = 29; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(now.getDate() - i);\n        days.push(day);\n      }\n    } else if (view === 'yearly') {\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        days.push(month);\n      }\n    }\n    return days;\n  };\n\n  const isCompleted = (habit, day) => {\n    const key = day.toDateString();\n    return habit.daily.some(entry => entry.key === key && entry.completed);\n  };\n\n  const getConsistency = (habit) => {\n    const days = getDays();\n    const completed = days.filter(day => isCompleted(habit, day)).length;\n    return Math.round((completed / days.length) * 100);\n  };\n\n  const getStreakByPeriod = (habit, period) => {\n    const now = new Date();\n    let streak = 0;\n    \n    if (period === 'weekly') {\n      for (let week = 0; week < 52; week++) {\n        const weekStart = new Date(now);\n        weekStart.setDate(now.getDate() - now.getDay() - (week * 7));\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        \n        const hasCompletionInWeek = habit.daily.some(entry => {\n          const entryDate = new Date(entry.key);\n          return entry.completed && entryDate >= weekStart && entryDate <= weekEnd;\n        });\n        \n        if (hasCompletionInWeek) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n    } else if (period === 'monthly') {\n      for (let month = 0; month < 24; month++) {\n        const monthStart = new Date(now.getFullYear(), now.getMonth() - month, 1);\n        const monthEnd = new Date(now.getFullYear(), now.getMonth() - month + 1, 0);\n        \n        const hasCompletionInMonth = habit.daily.some(entry => {\n          const entryDate = new Date(entry.key);\n          return entry.completed && entryDate >= monthStart && entryDate <= monthEnd;\n        });\n        \n        if (hasCompletionInMonth) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n    } else if (period === 'yearly') {\n      for (let year = 0; year < 10; year++) {\n        const yearStart = new Date(now.getFullYear() - year, 0, 1);\n        const yearEnd = new Date(now.getFullYear() - year, 11, 31);\n        \n        const hasCompletionInYear = habit.daily.some(entry => {\n          const entryDate = new Date(entry.key);\n          return entry.completed && entryDate >= yearStart && entryDate <= yearEnd;\n        });\n        \n        if (hasCompletionInYear) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n    }\n    \n    return streak;\n  };\n\n  const days = getDays();\n  \n  return (\n    <section className=\"identity-tracker\" aria-label={`${view} identity tracking`}>\n      <h3>ðŸŽ¯ Identity Reinforcement - {view.charAt(0).toUpperCase() + view.slice(1)} View</h3>\n      \n      <div className=\"tracker-grid\" role=\"table\" aria-label=\"Identity tracking grid\">\n        <div className=\"tracker-header\" role=\"row\">\n          <div className=\"habit-col\" role=\"columnheader\">Identity</div>\n          {days.map((day, i) => (\n            <div key={i} className=\"day-col\" role=\"columnheader\">\n              {view === 'yearly' ? day.toLocaleDateString('en', {month: 'short'}) : day.getDate()}\n            </div>\n          ))}\n          <div className=\"consistency-col\" role=\"columnheader\">Consistency</div>\n          <div className=\"streak-col\" role=\"columnheader\">Streak</div>\n        </div>\n        \n        {habits.map(habit => {\n          const habitStats = getHabitStats(habit);\n          const periodStreak = getStreakByPeriod(habit, view);\n          const consistency = getConsistency(habit);\n          \n          return (\n            <div key={habit.id} className=\"habit-row\" role=\"row\">\n              <div className=\"habit-identity\" role=\"cell\">\n                <span className=\"icon\" role=\"img\" aria-label={habit.name}>{habit.icon}</span>\n                <div className=\"identity-info\">\n                  <span className=\"identity-text\">{habit.identity}</span>\n                  <span className=\"start-date\" title=\"Days since starting this identity\">\n                    {habitStats.daysSinceStart} days building\n                  </span>\n                </div>\n              </div>\n              \n              {days.map((day, i) => {\n                const canEdit = day >= new Date(habit.startDate);\n                const completed = isCompleted(habit, day);\n                return (\n                  <div \n                    key={i} \n                    className=\"day-dot\" \n                    onClick={canEdit ? () => toggleHabit(habit.id, day) : undefined}\n                    role=\"cell\"\n                    tabIndex={canEdit ? 0 : -1}\n                    onKeyDown={(e) => {\n                      if (canEdit && (e.key === 'Enter' || e.key === ' ')) {\n                        e.preventDefault();\n                        toggleHabit(habit.id, day);\n                      }\n                    }}\n                    aria-label={`${habit.name} on ${day.toLocaleDateString()}: ${completed ? 'completed' : 'not completed'}${canEdit ? ', click to toggle' : ''}`}\n                  >\n                    <div className={`dot ${canEdit ? 'clickable' : 'disabled'} ${completed ? 'completed' : ''}`}></div>\n                  </div>\n                );\n              })}\n              \n              <div className=\"consistency-score\" role=\"cell\" aria-label={`${consistency}% consistency`}>\n                {consistency}%\n              </div>\n              <div className=\"period-streak\" role=\"cell\" aria-label={`${periodStreak} ${view} streak`}>\n                ðŸ”¥ {periodStreak}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      \n      <div className=\"identity-insight\">\n        <p>\"Every action is a vote for the type of person you wish to become.\"</p>\n        <p>Focus on consistency, not perfection. Small wins compound into identity change.</p>\n      </div>\n    </section>\n  );\n};\n\nexport default IdentityTracker;"],"names":["_ref","habits","view","getHabitStats","toggleHabit","getDays","days","now","Date","i","day","setDate","getDate","push","month","getFullYear","getMonth","isCompleted","habit","key","toDateString","daily","some","entry","completed","_jsxs","className","concat","children","charAt","toUpperCase","slice","role","_jsx","map","toLocaleDateString","habitStats","periodStreak","getStreakByPeriod","period","streak","week","weekStart","getDay","weekEnd","entryDate","monthStart","monthEnd","year","yearStart","yearEnd","consistency","filter","length","Math","round","getConsistency","name","icon","identity","title","daysSinceStart","canEdit","startDate","onClick","id","undefined","tabIndex","onKeyDown","e","preventDefault"],"sourceRoot":""}